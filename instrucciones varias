## 00-configuracion.R ####

# 1. Crea subdirectorios del proyecto
# 2. Instala los paquetes R requeridos
# 3. Carga funciones requeridas y tokens


# Quitar el comentario de la linea siguiente si desea
# forzar actualizacion de todos los paquetes (DEMORADO!!!)
# update.packages(ask = FALSE, dependencies = c('Suggests'))


## Crear subdirectorios si no existen ####

if (!dir.exists("data"))      {dir.create("data")}
if (!dir.exists("salidas"))   {dir.create("salidas")}
if (!dir.exists("figuras"))   {dir.create("figuras")}
if (!dir.exists("imagenes"))  {dir.create("imagenes")}
if (!dir.exists("shapes"))    {dir.create("shapes")}
if (!dir.exists("funciones")) {dir.create("funciones")}
if (!dir.exists("tokens"))    {dir.create("tokens")}

#----------------------------------------------------------


## Cargar las funciones y tokens ####

funciones <- list.files(path = "funciones", full.names = TRUE)
sapply(funciones, source)

tokens <- list.files(path = "tokens", full.names = TRUE)
sapply(tokens, source)


## Instala devtools and backports ####

if (!require(backports)) {
  install.packages("backports")
  library(backports)
}

if (!require(devtools)) {
  install.packages("devtools")
  library(devtools)
}

#----------------------------------------------
## Lista de paquetes CRAN a instalar ####

paquetes <-
  c(
    "av",
    "bayesplot",
    "boxr",
    "cowplot",
    "curl",
    "data.table",
    "DataExplorer",
    "descr",
    "DescTools",
    "digest",
    "distcrete",
    "dplyr",
    "DT",
    "EpiEstim",
    "flextable",
    "forcats",
    "foreign",
    "formattable",
    "geoR",
    "gganimate",
    "ggcharts",
    "gghighlight",
    "ggpubr",
    "gifski",
    "glue",
    "gridExtra",
    "hexbin",
    "incidence",
    "kableExtra",
    "knitr",
    "Matrix",
    "magrittr",
    "officer",
    "outbreaks",
    "pander",
    "png",
    "processx",
    "projections",
    "plotly",
    "readr",
    "readxl",
    "reshape2",
    "rgeos",
    "rJava",
    "rlang",
    "rmarkdown",
    "RSocrata",
    "sf",
    "stringi",
    "stringr",
    "survival",
    "tables",
    "tibble",
    "tidyr",
    "tidytext",
    "tinytex",
    "transformr",
    "visdat",
    "xfun",
    "xlsx",
    "xtable"
  )

instalar_paquetes_cran(paquetes)

## Lista de paquetes github a installar ####

paquetes_github <- c(
  "tidyverse/ggplot2",
  "tidyverse/tibble",
  "reconhub/projections"
)

instalar_paquetes_github(paquetes_github)

#================================================


# 10-Obtener-datos-INS
library(tidyverse)

# Fecha actual
hoy <- as.Date(format(Sys.Date(), "%Y-%m-%d"))

library(RSocrata)
token <- "ew2rEMuESuzWPqMkyPfOSGJgE"
df.ins <- read.socrata("https://www.datos.gov.co/resource/gt2j-8ykr.json", app_token = token)

# fechas clave del INS
df.ins$fecha_sin <- as.Date(df.ins$fis, format = "%Y-%m-%d")
df.ins$fecha_not <- as.Date(df.ins$fecha_de_notificaci_n, format = "%Y-%m-%d")

# otras fechas importantes INS
df.ins$fecha_dx  <- as.Date(df.ins$fecha_diagnostico, format = "%Y-%m-%d")
df.ins$fecha_def <- as.Date(df.ins$fecha_de_muerte, format = "%Y-%m-%d")

# otras fechas en los datos del INS
df.ins$fecha_rec <- as.Date(df.ins$fecha_recuperado, format = "%Y-%m-%d")
df.ins$fecha_rpw <- as.Date(df.ins$fecha_reporte_web, format = "%Y-%m-%d")

# tipo caso: confirmados y fallecidos
df.ins$tipo_caso <- "Confirmados"
df.ins$tipo_caso[which(df.ins$atenci_n=="Fallecido" | df.ins$estado=="Fallecido")] <- "Fallecidos"

# renombrar algunos campos
df.ins$municipio <- df.ins$ciudad_de_ubicaci_n

# mover campos importantes (fechas, ajuste_) al principio
df.ins <- df.ins %>%
  dplyr::select(id_de_caso,
                municipio,
                tipo_caso,
                fecha_not,
                fecha_sin,
                fecha_dx,
                fecha_def,
                everything())


if (!dir.exists("data")) {dir.create("data")}


# Colombia
write_csv(df.ins,
          paste0("data/", "datos_ins_colombia.csv"))
write_csv(df.ins,
          paste0("data/", hoy, "-datos_ins-colombia-fecnot-", ins_max_fecha_not, ".csv"))
saveRDS(df.ins, file = "data/Colombia.RDS")


# Cali
df.ins.cali <- df.ins %>%
  filter(codigo_divipola=="76001")
write_csv(df.ins.cali,
          paste0("data/", "datos_ins_cali.csv"))
write_csv(df.ins.cali,
          paste0("data/", hoy, "-datos_ins-cali-fecnot-", ins_max_fecha_not, ".csv"))
saveRDS(df.ins.cali, file = "data/Cali.RDS")


# Buenaventura
df.ins.bventura <- df.ins %>%
  filter(codigo_divipola=="76109")
write_csv(df.ins.bventura,
          paste0("data/", "datos_ins_bventura.csv"))
write_csv(df.ins.bventura,
          paste0("data/", hoy, "-datos_ins-bventura-fecnot-", ins_max_fecha_not, ".csv"))
saveRDS(df.ins.bventura, file = "data/Bventura.RDS")
saveRDS(df.ins.bventura, file = "data/Buenaventura.RDS")


# Palmira
df.ins.palmira <- df.ins %>%
  filter(codigo_divipola=="76520")
write_csv(df.ins.palmira,
          paste0("data/", "datos_ins_palmira.csv"))
write_csv(df.ins.palmira,
          paste0("data/", hoy, "-datos_ins-palmira-fecnot-", ins_max_fecha_not, ".csv"))
saveRDS(df.ins.palmira, file = "data/Palmira.RDS")


# Jamundi
df.ins.jamundi <- df.ins %>%
  filter(codigo_divipola=="76364")
saveRDS(df.ins.jamundi, file = "data/Jamundi.RDS")


# Yumbo
df.ins.yumbo <- df.ins %>%
  filter(codigo_divipola=="76892")
saveRDS(df.ins.yumbo, file = "data/Yumbo.RDS")


# Tulua
df.ins.tulua <- df.ins %>%
  filter(codigo_divipola=="76834")
saveRDS(df.ins.tulua, file = "data/Tulua.RDS")


# Valle del Cauca
df.ins.valle <- df.ins %>%
  filter(codigo_divipola>="76000" & codigo_divipola<="76999")
write_csv(df.ins.valle,
          paste0("data/", "datos_ins_valle.csv"))
write_csv(df.ins.valle,
          paste0("data/", hoy, "-datos_ins-valle-fecnot-", ins_max_fecha_not, ".csv"))
saveRDS(df.ins.valle, file = "data/Valle.RDS")


# Valle Resto
df.ins.valle.resto <- df.ins.valle %>%
  filter(!(codigo_divipola %in% c("76001","76109","76520","76364","76892","76834")) )
saveRDS(df.ins.valle.resto, file = "data/Valle_resto.RDS")


# Valle No Distritos
df.ins.valle.nodis <- df.ins.valle %>%
  filter(!(codigo_divipola %in% c("76001","76109")) )
saveRDS(df.ins.valle.nodis, file = "data/Valle_nodis.RDS")


# Medellin
df.ins.medellin <- df.ins %>%
  filter(codigo_divipola=="5001")
saveRDS(df.ins.medellin, file = "data/Medellin.RDS")


# Bogota
df.ins.bogota <- df.ins %>%
  filter(codigo_divipola=="11001")
saveRDS(df.ins.bogota, file = "data/Bogota.RDS")

# Candelaria - Valle
df.ins.candelaria <- df.ins %>%
  filter(codigo_divipola=="76130")
  
  
  
  # --------------------------------------------------
  
  ```{r configuracion, message=FALSE, warning=FALSE, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)

source("00-Configuracion.R")
source("12-Leer-datos-rds-INS.R")

# definir el conjunto de analisis
df.casos <- readRDS("data/Valle.RDS")
area <- "Valle" # keep this label short

# fecha actual
hoy <- format(Sys.Date(), "%Y-%m-%d")

# Personalizar paletas de colores para las curvas epidemicas
paleta_cf <- c(
  "Confirmados" = "orange",
  "Fallecidos"  = "blue"
)

paleta_pcf <- c(
  "Probables"   = "lightblue",
  "Confirmados" = "orange",
  "Fallecidos"  = "blue"
)

paleta_sexo <- c(
  "M" = "red",
  "F"  = "blue"
)

```



#_----------------------------------------------------------

## Distibución de Casos - Cali

```{r distribucion-casos}

kable(with(df.ins.cali, addmargins(table(tipo))),
      caption = "Distribución por tipo [importado] (INS)",
      col.names = c("Tipo de caso", "n"))

kable(with(df.ins.cali, addmargins(table(atenci_n))),
      caption = "Distribución por atención (INS)",
      col.names = c("Atención", "n"))

kable(with(df.ins.cali, addmargins(table(estado))),
      caption = "Distribución por estado (INS)",
      col.names = c("Estado", "n"))

kable(with(df.ins.cali, addmargins(table(sexo))),
      caption = "Distribución por sexo",
      col.names = c("Tipo de caso", "n"))

kable(with(df.ins.cali, addmargins(table(tipo_caso))),
      caption = "Distribución por tipo caso",
      col.names = c("Tipo de caso", "n"))

```


#-----------------------------------------------------------

## Curva Epidémica - Cali

En esta sección se estima la curva epidemica.

```{r curva-epidemica}

# fechas intervenciones
fecha_toquequeda  <- as.Date("2020-03-20")
fecha_cuarentena  <- as.Date("2020-03-25")
fecha_cuarentena1 <- as.Date("2020-04-27") # lev parcial cuarentena

# Fecha de notificacion mas reciente
per_fin_not <- max(df.ins.cali$fecha_not)

# preparacion datos para Curva

# Incidencia - datos para analisis

# Fallecidos y Confirmados por fecha sintomas
inc.casos   <- incidence(df.ins.cali$fecha_sin)
max_ncasos  <- max(inc.casos$counts)
per_ini_sin <- as.Date(min(inc.casos$dates))
per_fin_sin <- as.Date(max(inc.casos$dates))

# Incidencia - datos para figura por tipo de caso
inc.casos.tipo <- incidence(df.ins.cali$fecha_sin,
                            groups = df.ins.cali$tipo_caso)

# Eje x: 3 dias antes del 1er caso hasta 3 dias despues de hoy
xt_min = as.Date(per_ini_sin) - lubridate::days(3)
xt_max = as.Date(hoy) + lubridate::days(3)


```



#------------------------------------------------------------


```{r}

It_plot <- plot(inc.casos.tipo, stack = FALSE, border = "white")

It_plot

```

```{r}

It_plot <- plot(inc.casos.tipo, stack = TRUE, border = "white")

It_plot

```

```{r}

It_plot <- plot(inc.casos.tipo, stack = TRUE, border = "white") +
  scale_fill_manual(values = paleta_cf, limits = names(paleta_cf)) +
  labs(x = "Fecha de Síntomas", y = "Casos") +
  theme_classic2()

file_curva_pdf  <- 
   paste0("salidas/", hoy, "-c19-curva-epidemica-v1-", per_fin_not, ".pdf")
 
ggsave(file_curva_pdf, plot = It_plot, height = 8, width = 11 )

It_plot

```

```{r}

It_plot <- plot(inc.casos.tipo, stack = TRUE, border = "white") +
  scale_fill_manual(values = paleta_cf, limits = names(paleta_cf)) +
  labs(x = "Fecha de Síntomas", y = "Casos") +
  theme_classic2() +
  geom_vline(xintercept = fecha_cuarentena, linetype = "dashed", color = "red") +
  annotate(
    "text",
    label = "Cuarentena",
    x = fecha_cuarentena,
    y = max_ncasos + 1,
    hjust = 1, angle = 90, vjust = -0.2
  )

file_curva_pdf  <- 
   paste0("salidas/", hoy, "-c19-curva-epidemica-v2-", per_fin_not, ".pdf")
 
ggsave(file_curva_pdf, plot = It_plot, height = 8, width = 11 )

It_plot

```


#-----------------------------------------------------------------


  
saveRDS(df.ins.candelaria, file = "data/Candelaria.RDS")





library(dygraphs) # graficos en JAvaScrip de series de  tiempo
#library(quantmod)
library(flexdashboard)
#getSymbols(c("MSFT", "HPQ", "INTC"), from = "2014-01-01", auto.assign=TRUE)

dygraph(MSFT[,2:4], group = "stocks") %>% 
  dySeries(c("MSFT.Low", "MSFT.Close", "MSFT.High"), label = "MSFT")

fallecidos <- df.ins$
  dygraph(lungDeaths)


dygraph(HPQ[,2:4], group = "stocks") %>% 
  dySeries(c("HPQ.Low", "HPQ.Close", "HPQ.High"), label = "HPQ")
```

dygraph(INTC[,2:4], group = "stocks") %>% 
  dySeries(c("INTC.Low", "INTC.Close", "INTC.High"), label = "INTC")


